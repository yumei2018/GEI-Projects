/*
 * The MIT License
 *
 * Copyright 2015 hdunsford.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.legend;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.UIManager;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class LegendRootPanel extends javax.swing.JPanel {

  /**
   * The pixel spacing between elements on the panel.
   */
  private static final int SPACING = 5;

  private boolean selected;
  private boolean expanded;
  private static Icon plus;
  private static Icon minus;

  private javax.swing.JLabel labelImage;
  private javax.swing.JLabel labelText;

  static {
    BufferedImage img;

    try {
      img = ImageIO.read(LegendItemRenderer.class.getResourceAsStream(
              "resources/Plus.png"));
      plus = new ImageIcon(img);
    } catch (IOException ex) {
      Logger.getLogger(LegendRootPanel.class.getName()).log(
              Level.SEVERE, ex.getMessage(), ex);

    }
    try {
      img = ImageIO.read(LegendItemRenderer.class.getResourceAsStream(
              "resources/Minus.png"));
      minus = new ImageIcon(img);
    } catch (IOException ex) {
      Logger.getLogger(LegendRootPanel.class.getName()).log(
              Level.SEVERE, ex.getMessage(), ex);

    }
  }

  /**
   * Creates new form LegendRootPanel
   */
  public LegendRootPanel() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() {

    labelText = new javax.swing.JLabel();
    labelImage = new javax.swing.JLabel();

    setBackground(Color.WHITE);

    labelText.setBackground(Color.WHITE);
    labelText.setFont(new java.awt.Font("Tahoma", 1, 12));
    labelText.setText("Layers");

    labelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(
            "/gov/ca/water/shapelite/legend/resources/Layers.png")));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                    layout.createSequentialGroup()
                    .addComponent(labelImage)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(labelText, javax.swing.GroupLayout.DEFAULT_SIZE,
                            141, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelText)
                    .addComponent(labelImage))
    );
  }

  /**
   * @return the expanded
   */
  public final boolean isSelected() {
    return selected;
  }

  /**
   *
   * @param selected
   */
  public final void setSelected(boolean selected) {
    this.selected = selected;
    if (this.selected) {
      this.labelText.setBackground(
              UIManager.getColor("Tree.selectionBackground"));
    } else {
      this.labelText.setBackground(Color.WHITE);
    }

  }

  public JLabel getTextLabel() {
    return labelText;
  }

  @Override
  public Dimension getPreferredSize() {
    Dimension dimensionCheck = labelImage.getPreferredSize();
    Dimension dimensionText = labelText.getPreferredSize();
    int width = dimensionCheck.width + dimensionText.width;
    int height = (Math.max(dimensionCheck.height, dimensionText.height));
    return new Dimension(width, height);
  }

  /**
   * Updates the layout.
   */
  @Override
  public void doLayout() {
    Dimension imageDimension = labelImage.getPreferredSize();
    Dimension textDimension = labelText.getPreferredSize();
    int imageY = 0;
    int textY = 0;
    if (imageDimension.height < textDimension.height) {
      imageY = (textDimension.height - imageDimension.height) / 2;
    } else {
      textY = (imageDimension.height - textDimension.height) / 2;
    }
    labelImage.setLocation(SPACING, imageY + SPACING);
    labelImage.setBounds(SPACING, imageY + SPACING, imageDimension.width,
            imageDimension.height);
    labelText.setLocation(imageDimension.width + SPACING * 2, textY + SPACING);
    labelText.setBounds(imageDimension.width + SPACING * 2, textY + SPACING,
            textDimension.width, textDimension.height);
  }

}
