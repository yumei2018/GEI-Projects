/*
 * The MIT License
 *
 * Copyright 2016 Harold A. Dunsford Jr. Ph.D..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.progress;

import gov.ca.water.shapelite.events.ProgressChangedEvent;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.LayoutStyle;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class ProgressTaskPanel extends javax.swing.JPanel {

  /**
   * the tracker that should control this panel.
   */
  private ProgressTracker tracker;

  /**
   * The listener to indicate the gui should be updated.
   */
  private final ProgressChangedEvent.Listener listener;

  /**
   * Creates new form ProgressTaskPanel.
   */
  public ProgressTaskPanel() {
    initComponents();
    listener = new ProgressChangedEvent.Listener() {
      @Override
      public void progressChanged(ProgressChangedEvent e) {
        updateGUI();
      }
    };
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labelTask = new JLabel();
    buttonCancel = new JButton();
    labelStatus = new JLabel();
    barProgress = new JProgressBar();

    setBackground(new Color(255, 255, 255));

    labelTask.setBackground(new Color(255, 255, 255));
    labelTask.setFont(new Font("Tahoma", 1, 12)); // NOI18N
    labelTask.setText("Task Name");

    buttonCancel.setBackground(new Color(255, 255, 255));
    buttonCancel.setIcon(new ImageIcon(getClass().getResource("/gov/ca/water/shapelite/progress/Cancel10.png"))); // NOI18N
    buttonCancel.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    labelStatus.setText("Ready.");

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(labelTask, GroupLayout.PREFERRED_SIZE, 202, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(barProgress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonCancel, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
      .addComponent(labelStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
            .addComponent(labelTask)
            .addComponent(buttonCancel))
          .addComponent(barProgress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(labelStatus))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void buttonCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    if (tracker != null) {
      if (!tracker.canBeCanceled()) {
        return;
      }

      if (tracker.getCancellable() != null) {
        boolean canceled = tracker.getCancellable().cancel();
        tracker.setCanceled(canceled);
      }
    }


  }//GEN-LAST:event_buttonCancelActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JProgressBar barProgress;
  private JButton buttonCancel;
  private JLabel labelStatus;
  private JLabel labelTask;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets the progress tracker.
   *
   * @return the tracker
   */
  public final ProgressTracker getTracker() {
    return tracker;
  }

  /**
   * Sets the progress tracker.
   *
   * @param tracker the tracker to set
   */
  public final void setTracker(ProgressTracker tracker) {
    if (this.tracker != null) {
      this.tracker.removeProgressChangedListener(listener);
    }
    this.tracker = tracker;
    this.tracker.addProgressChangedListener(listener);
  }

  /**
   * Updates the GUI elements to match the tracker status.
   */
  private void updateGUI() {
    this.labelTask.setText(tracker.getTaskName());
    this.labelStatus.setText(tracker.getMessage());
    this.barProgress.setValue(tracker.getPercent());
    buttonCancel.setVisible(tracker.canBeCanceled());

  }
}
