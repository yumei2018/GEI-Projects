/*
 * The MIT License
 *
 * Copyright 2016 Harold A. Dunsford Jr. Ph.D..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.progress;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Stack;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.LayoutStyle;
import javax.swing.SwingUtilities;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class ProgressPanel extends javax.swing.JPanel
    implements ProgressCountableCancellable {

  /**
   * The list of tasks that might need to be displayed. This panel will show the
   * most recent content, but the whole stack of tasks can be seen by clicking
   * on this panel.
   */
  private final Stack<ProgressTracker> tasks;

  /**
   * The current task running.
   */
  private ProgressTracker currentTask;

  /**
   * Creates new form ProgressPanel.
   */
  public ProgressPanel() {
    initComponents();
    tasks = new Stack<>();
    labelTask.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    labelTask.addMouseListener(new MouseAdapter() {
      @Override
      public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
          ProgressTaskList dialog = new ProgressTaskList(
              (JFrame) ProgressPanel.this.getRootPane().getParent(), true);
          dialog.getTrackers().clear();
          dialog.getTrackers().add(currentTask);
          dialog.getTrackers().addAll(tasks);
          dialog.setVisible(true);
        }
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labelTask = new JLabel();
    barProgress = new JProgressBar();
    buttonCancel = new JButton();

    labelTask.setFont(new Font("Tahoma", 1, 12)); // NOI18N
    labelTask.setText("Task Name");

    buttonCancel.setIcon(new ImageIcon(getClass().getResource("/gov/ca/water/shapelite/progress/Cancel10.png"))); // NOI18N
    buttonCancel.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(labelTask, GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(barProgress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonCancel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addComponent(labelTask)
      .addComponent(buttonCancel, GroupLayout.PREFERRED_SIZE, 18, GroupLayout.PREFERRED_SIZE)
      .addComponent(barProgress, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void buttonCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_buttonCancelActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JProgressBar barProgress;
  private JButton buttonCancel;
  private JLabel labelTask;
  // End of variables declaration//GEN-END:variables

  /**
   * Starts a process with the specified work units.
   *
   * @param workUnits The integer number of work units.
   */
  @Override
  public final void start(int workUnits) {
    barProgress.setIndeterminate(false);
    if (currentTask != null) {
      currentTask.start(workUnits);
      updateGUI();
    }
  }

  /**
   * Updates the progress indicator to reflect the new current unit.
   *
   * @param currentUnit
   */
  @Override
  public final void progress(int currentUnit) {
    if (currentTask != null) {
      currentTask.progress(currentUnit);
      int percent = currentTask.getPercent();
      if (percent > currentTask.getOldPercent()) {
        barProgress.setValue(percent);
        currentTask.setOldPercent(percent);
      }
      updateGUI();
    }
  }

  /**
   * Creates a new tracker, and updates the currently displayed task.
   *
   * @param taskName The new task name.
   */
  @Override
  public final void create(String taskName) {
    if (currentTask != null) {
      tasks.add(currentTask);
    }
    currentTask = new ProgressTracker();
    currentTask.create(taskName);
  }

  /**
   * Starts an indeterminate progress handler.
   */
  @Override
  public final void start() {
    currentTask.setIndeterminate(true);
    updateGUI();
  }

  /**
   * Updates the detailed message string of the progress. This is only visible
   * in the expanded view.
   *
   * @param message
   */
  @Override
  public final void progress(String message) {
    currentTask.progress(message);
    updateGUI();
  }

  /**
   * Terminates the current progress tracker.
   */
  @Override
  public final void finish() {
    if (currentTask != null) {
      currentTask.finish();
      if (!tasks.isEmpty()) {
        currentTask = tasks.pop();
        updateGUI();
      } else {
        currentTask = null;
      }
    }
  }

  /**
   * Creates a task with the specified name.
   *
   * @param taskName The task name.
   * @param canBeCanceled Boolean, true if the task can be canceled.
   */
  @Override
  public final void create(String taskName, boolean canBeCanceled) {
    if (currentTask != null) {
      tasks.add(currentTask);
      currentTask = new ProgressTracker();
      currentTask.create(taskName, canBeCanceled);
      updateGUI();
    }
  }

  /**
   * Creates a task with the specified name.
   *
   * @param taskName The String taks name.
   * @param cancellable A Cancelation handler.
   */
  @Override
  public final void create(String taskName, Cancellable cancellable) {
    if (currentTask != null) {
      tasks.add(currentTask);
      currentTask = new ProgressTracker();
      currentTask.create(taskName, cancellable);
      updateGUI();
    }
  }

  /**
   * Handles whether or not the current task is canceled.
   *
   * @return
   */
  @Override
  public final boolean isCanceled() {
    return currentTask.isCanceled();
  }

  /**
   * Updates the controls on this panel to reflect the current progress.
   */
  private void updateGUI() {
    if (this.currentTask != null) {
      this.labelTask.setText(currentTask.getTaskName());
      this.labelTask.setToolTipText(currentTask.getMessage());
      if (this.currentTask.isIndeterminate()) {
        this.barProgress.setIndeterminate(true);
      } else {
        this.barProgress.setValue(currentTask.getPercent());
      }
      if (this.currentTask.canBeCanceled()) {
        buttonCancel.setVisible(true);
      } else {
        buttonCancel.setVisible(false);
      }
    } else {
      this.labelTask.setText("Ready.");
      this.labelTask.setToolTipText("");
      this.barProgress.setIndeterminate(false);
      this.barProgress.setValue(0);
      buttonCancel.setVisible(false);
    }
  }
}
