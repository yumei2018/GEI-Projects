/*
 * The MIT License
 *
 * Copyright 2015 hdunsford.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.toolbox;

import gov.ca.water.shapelite.NonNull;
import gov.ca.water.shapelite.events.ParameterChangedEvent;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class BooleanParameterPanel extends ParameterPanel {

  /**
   * A parameter to store the value for this panel.
   */
  private BooleanParameter parameter;

  /**
   * Creates new form BooleanParameterPanel.
   */
  public BooleanParameterPanel() {
    this(new BooleanParameter());
  }

  /**
   * Creates new form BooleanParameterPanel.
   *
   * @param parameter The actual parameter to use for this class.
   */
  public BooleanParameterPanel(BooleanParameter parameter) {
    this.parameter = parameter;
    if (this.parameter != null) {
      this.parameter.addParameterChangedListener(new ParameterChangedEvent.Listener() {
        @Override
        public void parameterChanged(ParameterChangedEvent e) {
          updateGui();
        }
      });
    }
    initComponents();
    updateGui();

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labelStatus = new javax.swing.JLabel();
    panelValue = new javax.swing.JPanel();
    checkSelected = new javax.swing.JCheckBox();

    setMaximumSize(new java.awt.Dimension(32767, 43));

    labelStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource(
        "/gov/ca/water/shapelite/toolbox/resources/StatusGood.png")));
    labelStatus.setText(null);

    panelValue.setBorder(javax.swing.BorderFactory.createTitledBorder("Select:"));

    checkSelected.setSelected(true);
    checkSelected.setText("Selected");
    checkSelected.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkSelectedActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelValueLayout = new javax.swing.GroupLayout(panelValue);
    panelValue.setLayout(panelValueLayout);
    panelValueLayout.setHorizontalGroup(
        panelValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelValueLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(checkSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
            .addContainerGap())
    );
    panelValueLayout.setVerticalGroup(
        panelValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelValueLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(checkSelected))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(panelValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 13, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(panelValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void checkSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSelectedActionPerformed
    this.parameter.setSelected(checkSelected.isSelected());
  }//GEN-LAST:event_checkSelectedActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkSelected;
  private javax.swing.JLabel labelStatus;
  private javax.swing.JPanel panelValue;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets the boolean parameter.
   *
   * @return The parameter.
   */
  @Override
  public final Parameter getParameter() {
    return parameter;
  }

  /**
   * Sets the boolean parameter showing whether the value should be selected or
   * not.
   *
   * @param param The parameter to set.
   */
  @Override
  public final void setParameter(@NonNull Parameter param) {
    if (param == null) {
      throw new IllegalArgumentException("Parameter param cannot be null.");
    }
    if (!(param instanceof BooleanParameter)) {
      throw new IllegalArgumentException("Parameter param must be a Boolean Parameter.");
    }
    this.parameter = (BooleanParameter) param;
    updateGui();
  }

  /**
   * Updates the gui to match the parameter values.
   */
  private void updateGui() {
    checkSelected.setSelected(parameter.isSelected());
    checkSelected.setText(parameter.getParameterText());
    if (panelValue.getBorder() instanceof TitledBorder) {
      TitledBorder border = (TitledBorder) panelValue.getBorder();
      border.setTitle(parameter.getParameterName());
    }

  }

}
