/*
 * The MIT License
 *
 * Copyright 2015 hdunsford.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.toolbox;

import gov.ca.water.shapelite.events.ValidChangedEvent;
import gov.ca.water.shapelite.projection.ProjectionInfo;
import gov.ca.water.shapelite.projection.Projections;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;


/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class ProjectionParameterSelectionPanel extends javax.swing.JPanel {

 
  
  

    /**
     * Creates new form ProjectionParameterSelectionPanel
     */
    public ProjectionParameterSelectionPanel() {
        initComponents();
        this.projectionSelectionTree1.addTreeSelectionListener(new TreeSelectionListener(){

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                checkValid();
            }
        });
    }

    
    //<editor-fold defaultstate="collapsed" desc="ValidChangedEvent">
  /**
   * The list of listeners.
   */
  private final List<ValidChangedEvent.Listener> validChangedListeners = new ArrayList<>();

  /**
   * Adds the specified listener to the list of listeners to be notified during
   * an event. If the item is already in the list, it will not be added a second
   * time.
   *
   * @param listener The ValidChangedEvent.Listener to connect.
   */
  public void addValidChangedListener(ValidChangedEvent.Listener listener) {
    if (!validChangedListeners.contains(listener)) {
      validChangedListeners.add(listener);
    }
  }

  /**
   * Removes the specified listener from the list if it is in the list.
   *
   * @param listener The ValidChangedEvent.Listener to disconnect.
   */
  public void removeValidChangedListener(ValidChangedEvent.Listener listener) {
    validChangedListeners.remove(listener);
  }

  /**
   * Fires the ValidChanged event and notifies each of the listeners.
   *
   * @param e A {EventType}Event with the source object and any properties
   * associated with this event.
   */
  public void fireValidChanged(ValidChangedEvent e) {
    for (ValidChangedEvent.Listener listener : validChangedListeners) {
      listener.validChanged(e);
    }
  }

  //</editor-fold>
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        radUtmFoot = new javax.swing.JRadioButton();
        radOther = new javax.swing.JRadioButton();
        radUtmMeter = new javax.swing.JRadioButton();
        radWGS84 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectionSelectionTree1 = new gov.ca.water.shapelite.projection.ProjectionSelectionTree();

        buttonGroup1.add(radUtmFoot);
        radUtmFoot.setSelected(true);
        radUtmFoot.setText("NAD83 UTM Zone 10 (US_FOOT) ");
        radUtmFoot.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radUtmFootActionPerformed(evt);
            }
        });

        buttonGroup1.add(radOther);
        radOther.setText("Other:");
        radOther.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radOtherActionPerformed(evt);
            }
        });

        buttonGroup1.add(radUtmMeter);
        radUtmMeter.setText("NAD83 UTM Zone 10 (Meter)");
        radUtmMeter.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radUtmMeterActionPerformed(evt);
            }
        });

        buttonGroup1.add(radWGS84);
        radWGS84.setText("WGS1984 (Longitude, Latitude)");
        
        radWGS84.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radWGS84ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(projectionSelectionTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radUtmFoot)
                    .addComponent(radWGS84)
                    .addComponent(radUtmMeter)
                    .addComponent(radOther))
                .addContainerGap(213, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radUtmFoot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radUtmMeter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radWGS84)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radOther)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void radUtmFootActionPerformed(java.awt.event.ActionEvent evt) {
        checkValid();
    }

    private void radUtmMeterActionPerformed(java.awt.event.ActionEvent evt) {
        checkValid();
    }

    private void radWGS84ActionPerformed(java.awt.event.ActionEvent evt) {
         checkValid();
    }

    private void radOtherActionPerformed(java.awt.event.ActionEvent evt) {
         checkValid();
    }

    /**
     * Checks to see if the selection is valid and enables the ok button if it is.
     */
    private void checkValid() {
      fireValidChanged(new ValidChangedEvent(this, getProjection() != null));
    }

    /**
     * Gets the selected projection from this panel.
     * @return The ProjectionInfo result.
     */
    public ProjectionInfo getProjection() {
        if (radUtmFoot.isSelected()) {
            return Projections.getNad83UTMZone10Foot();
        }
        if (radUtmMeter.isSelected()) {
            return Projections.getProjected().getUtmNad1983().getNAD1983UTMZone10N();
        }
        if (radWGS84.isSelected()) {
            return Projections.getGeographic().getWorld().getWGS1984();
        }
        if (radOther.isSelected()) {
            return this.projectionSelectionTree1.getSelectedProjection();
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private gov.ca.water.shapelite.projection.ProjectionSelectionTree projectionSelectionTree1;
    private javax.swing.JRadioButton radOther;
    private javax.swing.JRadioButton radUtmFoot;
    private javax.swing.JRadioButton radUtmMeter;
    private javax.swing.JRadioButton radWGS84;
    // End of variables declaration//GEN-END:variables

}
