/*
 * The MIT License
 *
 * Copyright 2016 Harold A. Dunsford Jr. Ph.D..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.symbology.gui;

import gov.ca.water.shapelite.events.ColorChangedEvent;
import gov.ca.water.shapelite.symbology.LineSymbolizer;
import gov.ca.water.shapelite.symbology.LineStyle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class SymbolizerPanelMarkerPath extends javax.swing.JPanel
    implements Symbolizeable<LineSymbolizer> {

  /**
   * Symbolizer Marker Path.
   */
  private LineSymbolizer symbolizer;

  /**
   * Creates new form SymbolizerPanelMarkerPath.
   */
  public SymbolizerPanelMarkerPath() {
    initComponents();
    symbolizer = new LineSymbolizer();
    updateGuiFromSymbolizer();
    addEventHandlers();

  }

  /**
   * Add event handlers.
   */
  private void addEventHandlers() {
    spinnerWidth.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        symbolizer.setWidth((Float) spinnerWidth.getValue());
        panelPreview.repaint();
      }
    });
    colorLine.addColorChangedListener(new ColorChangedEvent.Listener() {
      @Override
      public void colorChanged(ColorChangedEvent e) {
        symbolizer.setFillColor(e.getColor());
        panelPreview.repaint();
      }
    });

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelPreview = new LinePreviewPanel();
    labelWidth = new JLabel();
    spinnerWidth = new JSpinner();
    colorLine = new ColorDropDown();
    jLabel1 = new JLabel();
    jLabel2 = new JLabel();
    comboStyle = new LineStyleDropDown();

    panelPreview.setBorder(BorderFactory.createTitledBorder("Preview:"));

    GroupLayout panelPreviewLayout = new GroupLayout(panelPreview);
    panelPreview.setLayout(panelPreviewLayout);
    panelPreviewLayout.setHorizontalGroup(panelPreviewLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 118, Short.MAX_VALUE)
    );
    panelPreviewLayout.setVerticalGroup(panelPreviewLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    labelWidth.setText("Width:");

    spinnerWidth.setModel(new SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(20.0f), Float.valueOf(1.0f)));

    jLabel1.setText("Color");
    jLabel1.setToolTipText("");

    jLabel2.setText("Style:");

    comboStyle.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        comboStyleActionPerformed(evt);
      }
    });

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(panelPreview, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(labelWidth)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerWidth))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboStyle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGap(10, 10, 10))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(colorLine, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(labelWidth)
          .addComponent(spinnerWidth, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(comboStyle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1)
          .addComponent(colorLine, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(0, 9, Short.MAX_VALUE))
      .addComponent(panelPreview, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void comboStyleActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboStyleActionPerformed

    Object item = comboStyle.getSelectedItem();
    if (item instanceof LineStyle) {
      LineStyle style = (LineStyle) item;
      symbolizer.setStyle(style);
    }
    panelPreview.repaint();
  }//GEN-LAST:event_comboStyleActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private ColorDropDown colorLine;
  private LineStyleDropDown comboStyle;
  private JLabel jLabel1;
  private JLabel jLabel2;
  private JLabel labelWidth;
  private LinePreviewPanel panelPreview;
  private JSpinner spinnerWidth;
  // End of variables declaration//GEN-END:variables

  /**
   * Uses information from the symbolizer to set the starting state of the
   * controls to match it as closely as possible.
   */
  private void updateGuiFromSymbolizer() {
    panelPreview.setSymbolizer(symbolizer);
    spinnerWidth.setValue(symbolizer.getWidth());
    LineStyle style = symbolizer.getStyle();
    comboStyle.setSelectedItem(style);
    colorLine.setSelectedColor(symbolizer.getFillColor());
  }

  /**
   * Gets the symbolizer.
   *
   * @return the symbolizer
   */
  @Override
  public final LineSymbolizer getSymbolizer() {
    return symbolizer;
  }

  /**
   * Sets symbolizer.
   *
   * @param symbolizer
   */
  @Override
  public final void setSymbolizer(LineSymbolizer symbolizer) {
    this.symbolizer = symbolizer;
    updateGuiFromSymbolizer();
  }

}
