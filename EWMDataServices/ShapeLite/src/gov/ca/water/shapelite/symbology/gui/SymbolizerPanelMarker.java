/*
 * The MIT License
 *
 * Copyright 2016 Harold A. Dunsford Jr. Ph.D..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.symbology.gui;

import gov.ca.water.shapelite.data.PointShapes;
import gov.ca.water.shapelite.events.ColorChangedEvent;
import gov.ca.water.shapelite.symbology.PointSymbolizer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class SymbolizerPanelMarker extends javax.swing.JPanel
    implements Symbolizeable<PointSymbolizer> {

  /**
   * The symbolizer being described by this Panel.
   */
  private PointSymbolizer symbolizer;

  /**
   * Creates new form SymbolizerPanelMarker.
   */
  public SymbolizerPanelMarker() {
    initComponents();
    for (PointShapes shape : PointShapes.values()) {
      comboShape.addItem(shape);
    }
    initListeners();
  }

  /**
   * Adds the listeners to the controls.
   */
  private void initListeners() {
    spinnerWidth.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        if (symbolizer != null) {
          Integer width = (Integer) spinnerWidth.getModel().getValue();
          symbolizer.setWidth(width);
          previewPoint.repaint();
        }
      }
    });
    spinnerHeight.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        if (symbolizer != null) {
          Integer height = (Integer) spinnerHeight.getModel().getValue();
          symbolizer.setHeight(height);
          previewPoint.repaint();
        }
      }
    });
    colorFill.addColorChangedListener(new ColorChangedEvent.Listener() {
      @Override
      public void colorChanged(ColorChangedEvent e) {
        if (symbolizer != null) {
          symbolizer.setFillColor(e.getColor());
          previewPoint.repaint();
        }
      }
    });
    colorBorder.addColorChangedListener(new ColorChangedEvent.Listener() {
      @Override
      public void colorChanged(ColorChangedEvent e) {
        if (symbolizer != null) {
          symbolizer.setBorderColor(e.getColor());
          previewPoint.repaint();
        }
      }
    });

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    previewPoint = new PointPreviewPanel();
    jLabel1 = new JLabel();
    comboShape = new JComboBox<>();
    labelWidth = new JLabel();
    labelHeight = new JLabel();
    spinnerWidth = new JSpinner();
    spinnerHeight = new JSpinner();
    panelColors = new JPanel();
    jLabel2 = new JLabel();
    jLabel3 = new JLabel();
    colorFill = new ColorDropDown();
    colorBorder = new ColorDropDown();

    previewPoint.setBorder(BorderFactory.createTitledBorder("Preview:"));
    previewPoint.addMouseWheelListener(new MouseWheelListener() {
      public void mouseWheelMoved(MouseWheelEvent evt) {
        previewPointMouseWheelMoved(evt);
      }
    });

    GroupLayout previewPointLayout = new GroupLayout(previewPoint);
    previewPoint.setLayout(previewPointLayout);
    previewPointLayout.setHorizontalGroup(previewPointLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 142, Short.MAX_VALUE)
    );
    previewPointLayout.setVerticalGroup(previewPointLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jLabel1.setText("Shape:");
    jLabel1.setToolTipText("");

    comboShape.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        comboShapeActionPerformed(evt);
      }
    });

    labelWidth.setText("Width:");

    labelHeight.setText("Height:");

    panelColors.setBorder(BorderFactory.createTitledBorder("Colors:"));

    jLabel2.setText("Fill:");

    jLabel3.setText("Border:");

    GroupLayout panelColorsLayout = new GroupLayout(panelColors);
    panelColors.setLayout(panelColorsLayout);
    panelColorsLayout.setHorizontalGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(panelColorsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(jLabel3)
          .addComponent(jLabel2))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(colorFill, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
          .addComponent(colorBorder, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    panelColorsLayout.setVerticalGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(panelColorsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel2)
          .addComponent(colorFill, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(panelColorsLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel3)
          .addComponent(colorBorder, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(previewPoint, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(panelColors, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboShape, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(labelWidth)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerWidth, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelHeight)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spinnerHeight, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(comboShape, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(labelWidth)
          .addComponent(labelHeight)
          .addComponent(spinnerWidth, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(spinnerHeight, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(panelColors, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addComponent(previewPoint, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void comboShapeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboShapeActionPerformed
    if (symbolizer != null) {
      symbolizer.setPointShape((PointShapes) comboShape.getSelectedItem());
      previewPoint.repaint();
    }
  }//GEN-LAST:event_comboShapeActionPerformed

  private void previewPointMouseWheelMoved(MouseWheelEvent evt) {//GEN-FIRST:event_previewPointMouseWheelMoved
    if (symbolizer != null) {
      int symbolWidth = symbolizer.getWidth();
      int symbolHeight = symbolizer.getHeight();
      int clicks = evt.getWheelRotation();
      symbolWidth -= clicks;
      symbolHeight -= clicks;
      symbolizer.setWidth(symbolWidth);
      symbolizer.setHeight(symbolHeight);
      updateGuiFromSymbolizer();
    }
  }//GEN-LAST:event_previewPointMouseWheelMoved


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private ColorDropDown colorBorder;
  private ColorDropDown colorFill;
  private JComboBox<PointShapes> comboShape;
  private JLabel jLabel1;
  private JLabel jLabel2;
  private JLabel jLabel3;
  private JLabel labelHeight;
  private JLabel labelWidth;
  private JPanel panelColors;
  private PointPreviewPanel previewPoint;
  private JSpinner spinnerHeight;
  private JSpinner spinnerWidth;
  // End of variables declaration//GEN-END:variables

  // <editor-fold defaultstate="collapsed" desc="Properties">
  /**
   * Gets the symbolizer being described by this Panel.
   *
   * @return
   */
  @Override
  public final PointSymbolizer getSymbolizer() {
    return symbolizer;
  }

  /**
   * Sets the symbolizer being described by this Panel.
   *
   * @param symbolizer
   */
  @Override
  public final void setSymbolizer(PointSymbolizer symbolizer) {
    this.symbolizer = symbolizer;
    updateGuiFromSymbolizer();
  }

  /**
   * Updates the GUI elements with values to reflect the current selection.
   */
  private void updateGuiFromSymbolizer() {
    previewPoint.setSymbolizer(symbolizer);
    comboShape.setSelectedItem(symbolizer.getPointShape());
    colorFill.setSelectedColor(symbolizer.getFillColor());
    colorBorder.setSelectedColor(symbolizer.getBorderColor());
    spinnerWidth.setValue(symbolizer.getWidth());
    spinnerHeight.setValue(symbolizer.getHeight());
  }

  // </editor-fold>
}
