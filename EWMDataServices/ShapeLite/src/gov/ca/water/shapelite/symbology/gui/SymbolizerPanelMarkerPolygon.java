/*
 * The MIT License
 *
 * Copyright 2016 Harold A. Dunsford Jr. Ph.D..
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package gov.ca.water.shapelite.symbology.gui;

import gov.ca.water.shapelite.Field;
import gov.ca.water.shapelite.Optional;
import gov.ca.water.shapelite.events.ColorChangedEvent;
import gov.ca.water.shapelite.symbology.LineStyle;
import gov.ca.water.shapelite.symbology.PolygonSymbolizer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Harold A. Dunsford Jr. Ph.D.
 */
public class SymbolizerPanelMarkerPolygon extends javax.swing.JPanel
    implements Symbolizeable<PolygonSymbolizer> {

  /**
   * The symbolizer for polygons.
   */
  private PolygonSymbolizer symbolizer;

  /**
   * Creates new form SymbolizerPanelMarkerPolygon.
   */
  public SymbolizerPanelMarkerPolygon() {
    initComponents();
    symbolizer = new PolygonSymbolizer();
    addListeners();
  }

  /**
   * Adds the event listeners.
   */
  private void addListeners() {
    colorFill.addColorChangedListener(new ColorChangedEvent.Listener() {
      @Override
      public void colorChanged(ColorChangedEvent e) {
        symbolizer.setFillColor(e.getColor());
        panelPreview.repaint();
      }
    });
    colorBorder.addColorChangedListener(new ColorChangedEvent.Listener() {
      @Override
      public void colorChanged(ColorChangedEvent e) {
        symbolizer.setBorderColor(e.getColor());
        panelPreview.repaint();
      }
    });
    spinnerBorderWidth.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        symbolizer.setBorderWidth((Float) spinnerBorderWidth.getValue());
        panelPreview.repaint();
      }
    });

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelPreview = new PolygonPreviewPanel();
    jLabel1 = new JLabel();
    colorFill = new ColorDropDown();
    jPanel1 = new JPanel();
    jLabel3 = new JLabel();
    spinnerBorderWidth = new JSpinner();
    colorBorder = new ColorDropDown();
    labelBorderColor = new JLabel();
    labelBorderStyle = new JLabel();
    comboStyle = new LineStyleDropDown();
    checkLabelField = new JCheckBox();
    comboLabelField = new JComboBox<>();

    panelPreview.setBorder(BorderFactory.createTitledBorder("Preview:"));

    GroupLayout panelPreviewLayout = new GroupLayout(panelPreview);
    panelPreview.setLayout(panelPreviewLayout);
    panelPreviewLayout.setHorizontalGroup(panelPreviewLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 163, Short.MAX_VALUE)
    );
    panelPreviewLayout.setVerticalGroup(panelPreviewLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 87, Short.MAX_VALUE)
    );

    jLabel1.setText("Fill Color:");

    jPanel1.setBorder(BorderFactory.createTitledBorder("Border:"));

    jLabel3.setText("Width:");

    spinnerBorderWidth.setModel(new SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(20.0f), Float.valueOf(1.0f)));

    labelBorderColor.setText("Color:");
    labelBorderColor.setToolTipText("");

    labelBorderStyle.setText("Style:");

    comboStyle.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        comboStyleActionPerformed(evt);
      }
    });

    GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(labelBorderStyle)
          .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3)
            .addComponent(labelBorderColor, GroupLayout.Alignment.TRAILING)))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
            .addComponent(spinnerBorderWidth)
            .addComponent(colorBorder, GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
          .addComponent(comboStyle, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(17, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(spinnerBorderWidth, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(colorBorder, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(labelBorderColor))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(labelBorderStyle)
          .addComponent(comboStyle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    checkLabelField.setText("Label Field");
    checkLabelField.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        checkLabelFieldActionPerformed(evt);
      }
    });

    comboLabelField.setEnabled(false);
    comboLabelField.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        comboLabelFieldActionPerformed(evt);
      }
    });

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(panelPreview, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(checkLabelField)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(comboLabelField, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(colorFill, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(colorFill, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addComponent(panelPreview, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkLabelField)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(comboLabelField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void comboStyleActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboStyleActionPerformed
    Object item = comboStyle.getSelectedItem();
    if (item instanceof LineStyle) {
      LineStyle style = (LineStyle) item;
      symbolizer.setBorderStyle(style);
      panelPreview.repaint();
    }

  }//GEN-LAST:event_comboStyleActionPerformed

  private void comboLabelFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboLabelFieldActionPerformed
    Object item = comboLabelField.getSelectedItem();
    if (item instanceof String) {
      String name = (String) item;
      panelPreview.getMarker().setLabel(name);
      symbolizer.setLabelField(name);
      panelPreview.repaint();
    }

  }//GEN-LAST:event_comboLabelFieldActionPerformed

  private void checkLabelFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_checkLabelFieldActionPerformed
    comboLabelField.setEnabled(checkLabelField.isSelected());
  }//GEN-LAST:event_checkLabelFieldActionPerformed

  /**
   * The symbolizer.
   *
   * @return
   */
  @Override
  public final PolygonSymbolizer getSymbolizer() {
    return symbolizer;
  }

  /**
   * The marker polygon.
   *
   * @param symbolizer The symbolizer.
   */
  @Override
  public final void setSymbolizer(PolygonSymbolizer symbolizer) {
    this.symbolizer = symbolizer;
    updateGuiFromSymbolizer();
  }

  /**
   * Update the GUI to match the current symbolizer.
   */
  private void updateGuiFromSymbolizer() {
    panelPreview.setSymbolizer(symbolizer);
    colorFill.setSelectedColor(symbolizer.getFillColor());
    colorBorder.setSelectedColor(symbolizer.getBorderColor());
    spinnerBorderWidth.setValue(symbolizer.getBorderWidth());
    comboStyle.setSelectedItem(symbolizer.getBorderStyle());
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox checkLabelField;
  private ColorDropDown colorBorder;
  private ColorDropDown colorFill;
  private JComboBox<String> comboLabelField;
  private LineStyleDropDown comboStyle;
  private JLabel jLabel1;
  private JLabel jLabel3;
  private JPanel jPanel1;
  private JLabel labelBorderColor;
  private JLabel labelBorderStyle;
  private PolygonPreviewPanel panelPreview;
  private JSpinner spinnerBorderWidth;
  // End of variables declaration//GEN-END:variables

  /**
   * Sets the list of possible fields from the current dataset to use for
   * labeling.
   *
   * @param fields the fields to set
   */
  public final void setFields(List<Field> fields) {
    for (Field field : fields) {
      comboLabelField.addItem(field.getName());
    }
  }
}
